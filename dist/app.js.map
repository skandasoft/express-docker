{"version":3,"sources":["../src/app.ts"],"names":["dotenv","config","reloadify","require","__dirname","app","use","port","process","env","PORT","set","path","join","express","static","skip","req","res","statusCode","stream","fs","createWriteStream","flags","stdout","dogs","error","next","NODE_ENV","headersSent","youch","Youch","toHTML","then","html","status","send","listen","logger","info","LOG_LEVEL"],"mappings":";;;;;;;AAAA;;AAGA;;AAEA;;AAEA;;AAEA;;AACA;;AAEA;;AAaA;;AAyCA;;;;;;AArDAA,MAAM,CAACC,MAAP,G,CAEA;;AAEA,IAAMC,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAP,CAAiCC,SAAjC,CAAlB;;AAEA,IAAMC,GAAG,GAAG,uBAAZ;eACeA,G;;AAEfA,GAAG,CAACC,GAAJ,CAAQJ,SAAR,E,CAEA;;AAGA,IAAMK,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAL,GAAG,CAACM,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAN,GAAG,CAACM,GAAJ,CAAQ,OAAR,EAAiBC,IAAI,CAACC,IAAL,CAAUT,SAAV,EAAqB,QAArB,CAAjB;AACAC,GAAG,CAACC,GAAJ,CAAQQ,iBAAQC,MAAR,CAAe,QAAf,CAAR;AAEAV,GAAG,CAACC,GAAJ,CAAQ,4BAAR,E,CAEA;;AACAD,GAAG,CAACC,GAAJ,CACC,qBAAO,KAAP,EAAc;AACbU,EAAAA,IAAI,EAAE,cAAUC,GAAV,EAAeC,GAAf,EAAoB;AACzB,WAAOA,GAAG,CAACC,UAAJ,GAAiB,GAAxB;AACA;AAHY,CAAd,CADD,E,CAQA;;AACAd,GAAG,CAACC,GAAJ,CACC,qBAAO,UAAP,EAAmB;AAClBc,EAAAA,MAAM,EAAEC,EAAE,CAACC,iBAAH,CAAqBV,IAAI,CAACC,IAAL,CAAUT,SAAV,EAAqB,oBAArB,CAArB,EAAiE;AAAEmB,IAAAA,KAAK,EAAE;AAAT,GAAjE;AADU,CAAnB,CADD,E,CAKA;;AACAlB,GAAG,CAACC,GAAJ,CACC,qBAAO,KAAP,EAAc;AACbU,EAAAA,IAAI,EAAE,cAACC,GAAD,EAAeC,GAAf,EAAiC;AACtC,WAAOA,GAAG,CAACC,UAAJ,GAAiB,GAAxB;AACA,GAHY;AAIbC,EAAAA,MAAM,EAAEZ,OAAO,CAACgB;AAJH,CAAd,CADD,E,CASA;AACA;AACA;AACA;AACA;AACA;;AAGAnB,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBmB,aAAjB;;AAEAtB,OAAO,CAAC,gBAAD,CAAP,C,CAEA;;;AACAE,GAAG,CAACC,GAAJ,CAAQ,UAAUoB,KAAV,EAAwBT,GAAxB,EAAsCC,GAAtC,EAAqDS,IAArD,EAAyE;AAChF,MAAID,KAAK,IAAIlB,OAAO,CAACC,GAAR,CAAYmB,QAAZ,KAAyB,YAAlC,IAAkD,CAACV,GAAG,CAACW,WAA3D,EAAwE;AACvE,QAAMC,KAAK,GAAG,IAAIC,cAAJ,CAAUL,KAAV,EAAiBT,GAAjB,CAAd;AAEA,WAAOa,KAAK,CAACE,MAAN,GAAeC,IAAf,CAAoB,UAACC,IAAD;AAAA,aAAUhB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBxB,GAAhB,CAAoB,cAApB,EAAoC,WAApC,EAAiDyB,IAAjD,CAAsDF,IAAtD,CAAV;AAAA,KAApB,CAAP;AACA;;AACDP,EAAAA,IAAI,CAACD,KAAD,CAAJ;AACA,CAPD;AASArB,GAAG,CAACgC,MAAJ,CAAW9B,IAAX,EAAiB,YAAY;AAC5B+B,kBAAOC,IAAP,CAAY,sCAAsChC,IAAlD;;AACA+B,kBAAOC,IAAP,CAAY,kBAAkB/B,OAAO,CAACC,GAAR,CAAY+B,SAA1C;AACA,CAHD","sourcesContent":["import express, { NextFunction } from \"express\";\r\nimport { Request, Response } from \"express\";\r\n\r\nimport * as path from \"path\";\r\n\r\nimport * as fs from \"fs\";\r\n\r\nimport cookieParser from \"cookie-parser\";\r\n\r\nimport logger from \"./logger\";\r\nimport morgan from \"morgan\";\r\n\r\nimport * as dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\n// require(\"dotenv\").config();\r\n\r\nconst reloadify = require(\"@skandasoft/reloadify\")(__dirname);\r\n\r\nconst app = express();\r\nexport default app;\r\n\r\napp.use(reloadify);\r\n\r\n// const Youch = require(\"youch\");\r\nimport { default as Youch } from \"youch\";\r\n\r\nconst port = process.env.PORT || 4040;\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", path.join(__dirname, \"/views\"));\r\napp.use(express.static(\"public\"));\r\n\r\napp.use(cookieParser());\r\n\r\n// log only 4xx and 5xx responses to console\r\napp.use(\r\n\tmorgan(\"dev\", {\r\n\t\tskip: function (req, res) {\r\n\t\t\treturn res.statusCode < 400;\r\n\t\t},\r\n\t})\r\n);\r\n\r\n// log all requests to access.log\r\napp.use(\r\n\tmorgan(\"combined\", {\r\n\t\tstream: fs.createWriteStream(path.join(__dirname, \"../logs/access.log\"), { flags: \"a\" }),\r\n\t})\r\n);\r\n// show on console -> method/sub url/time taken\r\napp.use(\r\n\tmorgan(\"dev\", {\r\n\t\tskip: (req: Request, res: Response) => {\r\n\t\t\treturn res.statusCode > 400;\r\n\t\t},\r\n\t\tstream: process.stdout,\r\n\t})\r\n);\r\n\r\n// reloadify will not work\r\n// app.get(\"/\", (req: Request, res: Response) => {\r\n// \tres.status(200).send({\r\n// \t\tmessage: \"Hello Worlds!!!!\",\r\n// \t});\r\n// });\r\n\r\nimport dogs from \"./routes/dogs\";\r\napp.use(\"/dogs\", dogs);\r\n\r\nrequire(\"./routes/index\");\r\n\r\n// Then add some custom handling logic\r\napp.use(function (error: Error, req: Request, res: Response, next: NextFunction) {\r\n\tif (error && process.env.NODE_ENV !== \"production\" && !res.headersSent) {\r\n\t\tconst youch = new Youch(error, req);\r\n\r\n\t\treturn youch.toHTML().then((html) => res.status(500).set(\"Content-Type\", \"text/html\").send(html));\r\n\t}\r\n\tnext(error);\r\n});\r\n\r\napp.listen(port, function () {\r\n\tlogger.info(\"Express server listening on port \" + port);\r\n\tlogger.info(\"Log level is \" + process.env.LOG_LEVEL);\r\n});\r\n"],"file":"app.js"}